#!/usr/bin/env python3
"""
Test script to verify GenAI Agent integration with Smart Garden Planner.
"""
import asyncio
import json
import sys
import os
import httpx

# Add backend to path
sys.path.append('backend')

from models.schemas import RecommendationRequest
from dotenv import load_dotenv

# Load environment variables
load_dotenv('backend/.env')


async def test_genai_integration():
    """Test the GenAI Agent integration."""
    print("üåø Testing GenAI Agent Integration for Smart Garden Planner")
    print("=" * 60)
    
    # Check environment variables
    api_key = os.getenv("DO_AGENT_API_KEY")
    base_url = os.getenv("DO_AGENT_BASE_URL")
    
    print(f"API Key present: {'Yes' if api_key else 'No'}")
    print(f"Base URL: {base_url}")
    
    if not api_key or not base_url:
        print("‚ùå GenAI Agent service not configured!")
        print("Please check your environment variables:")
        print("- DO_AGENT_API_KEY")
        print("- DO_AGENT_BASE_URL")
        return False
    
    # Test the API endpoint directly
    test_data = {
        "location": "Denver, CO",
        "direction": "S",
        "water": "Medium",
        "maintenance": "Low",
        "garden_type": "Native Plants"
    }
    
    print(f"\nüß™ Testing with request:")
    print(f"Location: {test_data['location']}")
    print(f"Direction: {test_data['direction']}")
    print(f"Water: {test_data['water']}")
    print(f"Maintenance: {test_data['maintenance']}")
    print(f"Garden Type: {test_data['garden_type']}")
    
    try:
        print("\n‚è≥ Sending request to backend API...")
        
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(
                "http://localhost:8000/api/recommendations",
                json=test_data
            )
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ Success! Received recommendations:")
                print(f"Location: {result.get('location')}")
                print(f"Season: {result.get('season')}")
                print(f"Number of plants: {len(result.get('plants', []))}")
                print(f"Generated by: {result.get('generated_by')}")
                
                print("\nüå± Plant recommendations:")
                for i, plant in enumerate(result.get('plants', []), 1):
                    print(f"{i}. {plant.get('name')}")
                    if plant.get('scientific'):
                        print(f"   Scientific: {plant.get('scientific')}")
                    print(f"   Sun: {plant.get('sun')}, Water: {plant.get('water')}, Maintenance: {plant.get('maintenance')}")
                    print(f"   Plant now: {'Yes' if plant.get('plant_now') else 'No'}")
                    print()
                
                return True
            else:
                print(f"‚ùå API Error: {response.status_code}")
                print(f"Response: {response.text}")
                return False
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return False


if __name__ == "__main__":
    success = asyncio.run(test_genai_integration())
    sys.exit(0 if success else 1)